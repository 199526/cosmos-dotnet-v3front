<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ output extension=".cs" #>
<# List<(string name, string value)> headerNames = new List<(string name, string value)>()
{
    ("HttpConstants.HttpHeaders.Authorization", "authorization"),
    ("HttpConstants.HttpHeaders.HttpDate", "date"),
    ("HttpConstants.HttpHeaders.XDate", "x-ms-date"),
    ("HttpConstants.HttpHeaders.Version", "x-ms-version"),
    ("HttpConstants.HttpHeaders.A_IM", "A-IM"),
    ("HttpConstants.HttpHeaders.CanCharge", "x-ms-cancharge"),
    ("HttpConstants.HttpHeaders.CanOfferReplaceComplete", "x-ms-can-offer-replace-complete"),
    ("HttpConstants.HttpHeaders.CanThrottle", "x-ms-canthrottle"),
    ("HttpConstants.HttpHeaders.ChangeFeedStartFullFidelityIfNoneMatch", "x-ms-cosmos-start-full-fidelity-if-none-match"),
    ("HttpConstants.HttpHeaders.ClientRetryAttemptCount", "x-ms-client-retry-attempt-count"),
    ("HttpConstants.HttpHeaders.ConsistencyLevel", "x-ms-consistency-level"),
    ("HttpConstants.HttpHeaders.Continuation", "x-ms-continuation"),
    ("HttpConstants.HttpHeaders.DisableRUPerMinuteUsage", "x-ms-documentdb-disable-ru-per-minute-usage"),
    ("HttpConstants.HttpHeaders.EmitVerboseTracesInQuery", "x-ms-documentdb-query-emit-traces"),
    ("HttpConstants.HttpHeaders.EnableLogging", "x-ms-documentdb-script-enable-logging"),
    ("HttpConstants.HttpHeaders.EnableLowPrecisionOrderBy", "x-ms-documentdb-query-enable-low-precision-order-by"),
    ("HttpConstants.HttpHeaders.EnableScanInQuery", "x-ms-documentdb-query-enable-scan"),
    ("HttpConstants.HttpHeaders.EndEpk", "x-ms-end-epk"),
    ("HttpConstants.HttpHeaders.EndId", "x-ms-end-id"),
    ("HttpConstants.HttpHeaders.EnumerationDirection", "x-ms-enumeration-direction"),
    ("HttpConstants.HttpHeaders.FilterBySchemaResourceId", "x-ms-documentdb-filterby-schema-rid"),
    ("HttpConstants.HttpHeaders.GatewaySignature", "x-ms-gateway-signature"),
    ("HttpConstants.HttpHeaders.GetAllPartitionKeyStatistics", "x-ms-cosmos-internal-get-all-partition-key-stats"),
    ("HttpConstants.HttpHeaders.IfMatch", "If-Match"),
    ("HttpConstants.HttpHeaders.IfModifiedSince", "If-Modified-Since"),
    ("HttpConstants.HttpHeaders.IfNoneMatch", "If-None-Match"),
    ("HttpConstants.HttpHeaders.IgnoreSystemLoweringMaxThroughput", "x-ms-cosmos-internal-ignore-system-lowering-max-throughput"),
    ("HttpConstants.HttpHeaders.IncludeTentativeWrites", "x-ms-cosmos-include-tentative-writes"),
    ("HttpConstants.HttpHeaders.IndexingDirective", "x-ms-indexing-directive"),
    ("HttpConstants.HttpHeaders.IsBatchAtomic", "x-ms-cosmos-batch-atomic"),
    ("HttpConstants.HttpHeaders.IsBatchOrdered", "x-ms-cosmos-batch-ordered"),
    ("HttpConstants.HttpHeaders.IsClientEncrypted", "x-ms-cosmos-is-client-encrypted"),
    ("HttpConstants.HttpHeaders.IsOfferStorageRefreshRequest", "x-ms-cosmos-internal-is-offer-storage-refresh-request"),
    ("HttpConstants.HttpHeaders.IsReadOnlyScript", "x-ms-is-readonly-script"),
    ("HttpConstants.HttpHeaders.IsRUPerGBEnforcementRequest", "x-ms-cosmos-internal-is-ru-per-gb-enforcement-request"),
    ("HttpConstants.HttpHeaders.MaxPollingIntervalMilliseconds", "x-ms-cosmos-max-polling-interval"),
    ("HttpConstants.HttpHeaders.MigrateCollectionDirective", "x-ms-migratecollection-directive"),
    ("HttpConstants.HttpHeaders.MigrateOfferToAutopilot", "x-ms-cosmos-migrate-offer-to-autopilot"),
    ("HttpConstants.HttpHeaders.MigrateOfferToManualThroughput", "x-ms-cosmos-migrate-offer-to-manual-throughput"),
    ("HttpConstants.HttpHeaders.PageSize", "x-ms-max-item-count"),
    ("HttpConstants.HttpHeaders.PartitionKey", "x-ms-documentdb-partitionkey"),
    ("HttpConstants.HttpHeaders.PopulateCollectionThroughputInfo", "x-ms-documentdb-populatecollectionthroughputinfo"),
    ("HttpConstants.HttpHeaders.PopulatePartitionStatistics", "x-ms-documentdb-populatepartitionstatistics"),
    ("HttpConstants.HttpHeaders.PopulateQueryMetrics", "x-ms-documentdb-populatequerymetrics"),
    ("HttpConstants.HttpHeaders.PopulateQuotaInfo", "x-ms-documentdb-populatequotainfo"),
    ("HttpConstants.HttpHeaders.PopulateResourceCount", "x-ms-documentdb-populateresourcecount"),
    ("HttpConstants.HttpHeaders.PostTriggerExclude", "x-ms-documentdb-post-trigger-exclude"),
    ("HttpConstants.HttpHeaders.PostTriggerInclude", "x-ms-documentdb-post-trigger-include"),
    ("HttpConstants.HttpHeaders.Prefer", "Prefer"),
    ("HttpConstants.HttpHeaders.PreTriggerExclude", "x-ms-documentdb-pre-trigger-exclude"),
    ("HttpConstants.HttpHeaders.PreTriggerInclude", "x-ms-documentdb-pre-trigger-include"),
    ("HttpConstants.HttpHeaders.ProfileRequest", "x-ms-profile-request"),
    ("HttpConstants.HttpHeaders.ReadFeedKeyType", "x-ms-read-key-type"),
    ("HttpConstants.HttpHeaders.RemainingTimeInMsOnClientRequest", "x-ms-remaining-time-in-ms-on-client"),
    ("HttpConstants.HttpHeaders.ResourceTokenExpiry", "x-ms-documentdb-expiry-seconds"),
    ("HttpConstants.HttpHeaders.ResponseContinuationTokenLimitInKB", "x-ms-documentdb-responsecontinuationtokenlimitinkb"),
    ("HttpConstants.HttpHeaders.RestoreMetadataFilter", "x-ms-restore-metadata-filter"),
    ("HttpConstants.HttpHeaders.SessionToken", "x-ms-session-token"),
    ("HttpConstants.HttpHeaders.ShouldBatchContinueOnError", "x-ms-cosmos-batch-continue-on-error"),
    ("HttpConstants.HttpHeaders.StartEpk", "x-ms-start-epk"),
    ("HttpConstants.HttpHeaders.StartId", "x-ms-start-id"),
    ("HttpConstants.HttpHeaders.SupportSpatialLegacyCoordinates", "x-ms-documentdb-supportspatiallegacycoordinates"),
    ("HttpConstants.HttpHeaders.SystemDocumentType", "x-ms-cosmos-systemdocument-type"),
    ("HttpConstants.HttpHeaders.TargetGlobalCommittedLsn", "x-ms-target-global-committed-lsn"),
    ("HttpConstants.HttpHeaders.TargetLsn", "x-ms-target-lsn"),
    ("HttpConstants.HttpHeaders.TransportRequestID", "x-ms-transport-request-id"),
    ("HttpConstants.HttpHeaders.TruncateMergeLogRequest", "x-ms-cosmos-internal-truncate-merge-log"),
    ("HttpConstants.HttpHeaders.UpdateMaxThroughputEverProvisioned", "x-ms-cosmos-internal-update-max-throughput-ever-provisioned"),
    ("HttpConstants.HttpHeaders.UsePolygonsSmallerThanAHemisphere", "x-ms-documentdb-usepolygonssmallerthanahemisphere"),
    ("WFConstants.BackendHeaders.AddResourcePropertiesToResponse", "x-ms-cosmos-add-resource-properties-to-response"),
    ("WFConstants.BackendHeaders.AllowTentativeWrites", "x-ms-cosmos-allow-tentative-writes"),
    ("WFConstants.BackendHeaders.BinaryId", "x-ms-binary-id"),
    ("WFConstants.BackendHeaders.BinaryPassthroughRequest", "x-ms-binary-passthrough-request"),
    ("WFConstants.BackendHeaders.BindReplicaDirective", "x-ms-bind-replica"),
    ("WFConstants.BackendHeaders.CollectionChildResourceContentLimitInKB", "x-ms-cosmos-collection-child-contentlength-resourcelimit"),
    ("WFConstants.BackendHeaders.CollectionChildResourceNameLimitInBytes", "x-ms-cosmos-collection-child-resourcename-limit"),
    ("WFConstants.BackendHeaders.CollectionPartitionIndex", "collection-partition-index"),
    ("WFConstants.BackendHeaders.CollectionRid", "x-ms-documentdb-collection-rid"),
    ("WFConstants.BackendHeaders.CollectionSecurityIdentifier", "x-ms-collection-security-identifier"),
    ("WFConstants.BackendHeaders.CollectionServiceIndex", "collection-service-index"),
    ("WFConstants.BackendHeaders.ContentSerializationFormat", "x-ms-documentdb-content-serialization-format"),
    ("WFConstants.BackendHeaders.EffectivePartitionKey", "x-ms-effective-partition-key"),
    ("WFConstants.BackendHeaders.EnableDynamicRidRangeAllocation", "x-ms-enable-dynamic-rid-range-allocation"),
    ("WFConstants.BackendHeaders.ExcludeSystemProperties", "x-ms-exclude-system-properties"),
    ("WFConstants.BackendHeaders.FanoutOperationState", "x-ms-fanout-operation-state"),
    ("WFConstants.BackendHeaders.ForceQueryScan", "x-ms-documentdb-force-query-scan"),
    ("WFConstants.BackendHeaders.ForceSideBySideIndexMigration", "x-ms-cosmos-force-sidebyside-indexmigration"),
    ("WFConstants.BackendHeaders.IsFanoutRequest", "x-ms-is-fanout-request"),
    ("WFConstants.BackendHeaders.IsRetriedWriteRequest", "x-ms-cosmos-is-retried-write-request"),
    ("WFConstants.BackendHeaders.IsUserRequest", "x-ms-cosmos-internal-is-user-request"),
    ("WFConstants.BackendHeaders.MergeCheckPointGLSN", "x-ms-cosmos-internal-merge-checkpoint-glsn"),
    ("WFConstants.BackendHeaders.MergeStaticId", "x-ms-cosmos-merge-static-id"),
    ("WFConstants.BackendHeaders.PartitionCount", "x-ms-documentdb-partitioncount"),
    ("WFConstants.BackendHeaders.PartitionKeyRangeId", "x-ms-documentdb-partitionkeyrangeid"),
    ("WFConstants.BackendHeaders.PartitionResourceFilter", "x-ms-partition-resource-filter"),
    ("WFConstants.BackendHeaders.PopulateLogStoreInfo", "x-ms-cosmos-populate-logstoreinfo"),
    ("WFConstants.BackendHeaders.PopulateUnflushedMergeEntryCount", "x-ms-cosmos-internal-populate-unflushed-merge-entry-count"),
    ("WFConstants.BackendHeaders.PreserveFullContent", "x-ms-cosmos-preserve-full-content"),
    ("WFConstants.BackendHeaders.PrimaryMasterKey", "x-ms-primary-master-key"),
    ("WFConstants.BackendHeaders.PrimaryReadonlyKey", "x-ms-primary-readonly-key"),
    ("WFConstants.BackendHeaders.RemoteStorageType", "x-ms-remote-storage-type"),
    ("WFConstants.BackendHeaders.ResourceSchemaName", "x-ms-resource-schema-name"),
    ("WFConstants.BackendHeaders.ResourceTypes", "x-ms-cosmos-resourcetypes"),
    ("WFConstants.BackendHeaders.RestoreParams", "x-ms-restore-params"),
    ("WFConstants.BackendHeaders.RetriableWriteRequestId", "x-ms-cosmos-retriable-write-request-id"),
    ("WFConstants.BackendHeaders.RetriableWriteRequestStartTimestamp", "x-ms-cosmos-retriable-write-request-start-timestamp"),
    ("WFConstants.BackendHeaders.SchemaHash", "x-ms-schema-hash"),
    ("WFConstants.BackendHeaders.SchemaOwnerRid", "x-ms-schema-owner-rid"),
    ("WFConstants.BackendHeaders.SecondaryMasterKey", "x-ms-secondary-master-key"),
    ("WFConstants.BackendHeaders.SecondaryReadonlyKey", "x-ms-secondary-readonly-key"),
    ("WFConstants.BackendHeaders.ShareThroughput", "x-ms-share-throughput"),
    ("WFConstants.BackendHeaders.TimeToLiveInSeconds", "x-ms-time-to-live-in-seconds"),
    ("WFConstants.BackendHeaders.TransactionCommit", "x-ms-cosmos-tx-commit"),
    ("WFConstants.BackendHeaders.TransactionId", "x-ms-cosmos-tx-id"),
    ("WFConstants.BackendHeaders.UniqueIndexNameEncodingMode", "x-ms-cosmos-unique-index-name-encoding-mode"),
    ("WFConstants.BackendHeaders.UniqueIndexReIndexingState", "x-ms-cosmos-uniqueindex-reindexing-state"),
    ("WFConstants.BackendHeaders.UseSystemBudget", "x-ms-cosmos-use-systembudget"),
}; #>
//------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------

// This is auto-generated code.

namespace Microsoft.Azure.Cosmos
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Linq;
    using Microsoft.Azure.Documents;
    using Microsoft.Azure.Documents.Collections;

    internal class OptimizedRequestHeaders : INameValueCollection
    {
        private readonly Lazy<Dictionary<string, string>> lazyNotCommonHeaders;

<#  List<string> sortedHeaderPropertyNames = headerNames.Select(x => x.name.Split('.').Last()).OrderBy(x => x).ToList();
    foreach(string headerName in sortedHeaderPropertyNames) { #>
        public string <#= headerName #> { get; set; }
<# } #>

        public OptimizedRequestHeaders()
            : this(new Lazy<Dictionary<string, string>>(() => new Dictionary<string, string>()))
        {
        }

        private OptimizedRequestHeaders(Lazy<Dictionary<string, string>> notCommonHeaders)
        {
            this.lazyNotCommonHeaders = notCommonHeaders ?? throw new ArgumentNullException(nameof(notCommonHeaders));
        }

        public string this[string key] 
        { 
            get => this.Get(key); 
            set => this.Set(key, value);
        }

        public void Add(string key, string value)
        {
            this.Set(key, value);
        }

        public void Add(INameValueCollection collection)
        {
            foreach(string key in collection.Keys())
            {
                this.Set(key, collection[key]);
            }
        }

        public string[] AllKeys()
        {
            return this.Keys().ToArray();
        }

        public void Clear()
        {
            if (this.lazyNotCommonHeaders.IsValueCreated)
            {
                this.lazyNotCommonHeaders.Value.Clear();
            }

<#      foreach (string name in sortedHeaderPropertyNames) { #>
            this.<#= name #> = null;
<#      } #>

        }

        public INameValueCollection Clone()
        {
            Lazy<Dictionary<string, string>> cloneNotCommonHeaders = new Lazy<Dictionary<string, string>>(() => new Dictionary<string, string>());
            if (this.lazyNotCommonHeaders.IsValueCreated)
            {
                foreach (KeyValuePair<string, string> notCommonHeader in this.lazyNotCommonHeaders.Value)
                {
                    cloneNotCommonHeaders.Value[notCommonHeader.Key] = notCommonHeader.Value;
                }
            }

            OptimizedRequestHeaders cloneHeaders = new OptimizedRequestHeaders(cloneNotCommonHeaders)
            {
<#            foreach (string name in sortedHeaderPropertyNames) { #>
                <#= name #> = this.<#= name #>,
<#      } #>
            };

            return cloneHeaders;
        }

        public int Count()
        {
            return this.Keys().Count();
        }

        public IEnumerator GetEnumerator()
        {
            return this.Keys().GetEnumerator();
        }

        public string[] GetValues(string key)
        {
            string value = this.Get(key);
            if(value != null){
                return new string[] { value };
            }
            
            return null;
        }

        public IEnumerable<string> Keys()
        {
<#      foreach (string name in sortedHeaderPropertyNames) { #>
                if (this.<#= name #> != null)
                {
                    yield return this.<#= name #>;
                }
<#      } #>
        }

        public NameValueCollection ToNameValueCollection()
        {
            throw new NotImplementedException();
        }

        public void Remove(string key)
        {
            this.Set(key, null);
        }

        public string Get(string key)
        {
            switch (key.Length)
            {
<#      IEnumerable<IGrouping<int, (string name, string value)>> getGroupByLength = headerNames.GroupBy(x => x.value.Length).OrderBy(x => x.Key);
        foreach(IGrouping<int, (string name, string value)> group in getGroupByLength) { #>
                case <#= group.Key #>:
<#      foreach((string name, string value) in group) { #>
                    if (object.ReferenceEquals(<#= name #>, key))
                    {
                        return this.<#= name.Split('.').Last() #>;
                    }
                
<#      } #>
<#      foreach((string name, string value) in group) { #>
                    if (string.Equals(<#= name #>, key, StringComparison.OrdinalIgnoreCase))
                    {
                        return this.<#= name.Split('.').Last() #>;
                    }
                
<#      } #>
                    break;
<#     } #>
                default:
                    break;
            }

            if(this.lazyNotCommonHeaders.IsValueCreated)
            {
                return this.lazyNotCommonHeaders.Value[key];
            }
            
            return null;
        }

        public void Set(string key, string value)
        {
            switch (key.Length)
            {
<#      IEnumerable<IGrouping<int, (string name, string value)>> groupByLength = headerNames.GroupBy(x => x.value.Length).OrderBy(x => x.Key);
        foreach(IGrouping<int, (string name, string value)> group in groupByLength) { #>
                case <#= group.Key #>:
<#      foreach((string name, string value) in group) { #>
                    if (object.ReferenceEquals(<#= name #>, key))
                    {
                        this.<#= name.Split('.').Last() #> = value;
                        return;
                    }
                
<#      } #>
<#      foreach((string name, string value) in group) { #>
                    if (string.Equals(<#= name #>, key, StringComparison.OrdinalIgnoreCase))
                    {
                        this.<#= name.Split('.').Last() #> = value;
                        return;
                    }
                
<#      } #>
                    break;
<#      } #>
                default:
                    break;
            }

            this.lazyNotCommonHeaders.Value[key] = value;
        }
    }
}