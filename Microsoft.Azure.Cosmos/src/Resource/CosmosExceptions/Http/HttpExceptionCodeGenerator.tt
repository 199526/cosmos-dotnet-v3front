<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ output extension=".cs" #>
<# // Generate base exceptions: #>
<# HttpStatusCode[] httpStatusCodes = new HttpStatusCode[] 
{
    HttpStatusCode.BadRequest,
    HttpStatusCode.Forbidden,
    HttpStatusCode.NotFound,
    HttpStatusCode.RequestTimeout,
    HttpStatusCode.Conflict,
    HttpStatusCode.Gone,
    HttpStatusCode.RequestEntityTooLarge,
    HttpStatusCode.InternalServerError,
    HttpStatusCode.ServiceUnavailable,
}; #>
<# Dictionary<HttpStatusCode, Type> statusCodeToEnumType = new Dictionary<HttpStatusCode, Type>()
{
    { HttpStatusCode.BadRequest, typeof(BadRequestSubStatusCode) },
    { HttpStatusCode.Forbidden, typeof(ForbiddenSubStatusCode) },
    { HttpStatusCode.NotFound, typeof(NotFoundSubStatusCode) },
    { HttpStatusCode.RequestTimeout, typeof(RequestTimeoutSubStatusCode) },
    { HttpStatusCode.Conflict, typeof(ConflictSubStatusCode) },
    { HttpStatusCode.Gone, typeof(GoneSubStatusCode) },
    { HttpStatusCode.RequestEntityTooLarge, typeof(RequestEntityTooLargeSubStatusCode) },
    { HttpStatusCode.InternalServerError, typeof(InternalServerErrorSubStatusCode) },
    { HttpStatusCode.ServiceUnavailable, typeof(ServiceUnavailableSubStatusCode) },
}; #>
<#  foreach (KeyValuePair<HttpStatusCode, Type> statusCodeToEnum in statusCodeToEnumType) { #>
<# HttpStatusCode statusCode = statusCodeToEnum.Key; #>
<# string baseExceptionClassName = $"{statusCode}BaseException"; #>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>

namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCode #>
{
    using System;
    using System.Net;

    internal abstract class <#= baseExceptionClassName #> : CosmosHttpException
    {
        protected <#= baseExceptionClassName #>(
            int subStatusCode, 
            CosmosDiagnosticsContext cosmosDiagnosticsContext)
            : this(
                subStatusCode, 
                cosmosDiagnosticsContext, 
                message: null)
        {
        }

        protected <#= baseExceptionClassName #>(
            int subStatusCode, 
            CosmosDiagnosticsContext cosmosDiagnosticsContext, 
            string message)
            : this(
                subStatusCode, 
                cosmosDiagnosticsContext, 
                message: message, 
                innerException: null)
        {
        }

        protected <#= baseExceptionClassName #>(
            int subStatusCode, 
            CosmosDiagnosticsContext cosmosDiagnosticsContext, 
            string message, 
            Exception innerException)
            : base(
                statusCode: HttpStatusCode.<#= statusCode #>, 
                subStatusCode: subStatusCode, 
                cosmosDiagnosticsContext: cosmosDiagnosticsContext, 
                message: message, 
                innerException: innerException)
        {
        }
    }
}
<#
  SaveOutputToSubFolder(statusCode.ToString(), baseExceptionClassName + ".cs");
#>
<#  foreach (Enum subStatusCode in Enum.GetValues(statusCodeToEnum.Value)) { #>
<# // Generate SubExceptions: #>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>

<# string subStatusExceptionClassName = $"{subStatusCode}Exception"; #>
namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCode #>
{
    using System;

    internal sealed class <#= subStatusExceptionClassName #> : <#= baseExceptionClassName #>
    {
        public <#= subStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext)
            : this(cosmosDiagnosticsContext, message: null)
        {
        }

        public <#= subStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext, string message)
            : this(cosmosDiagnosticsContext, message, innerException: null)
        {
        }

        public <#= subStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext, string message, Exception innerException)
            : base(
                subStatusCode: (int)<#= statusCodeToEnum.Key #>SubStatusCode.<#= subStatusCode #>,
                cosmosDiagnosticsContext: cosmosDiagnosticsContext,
                message: message, 
                innerException: innerException)
        {
        }
    }
}
<# SaveOutputToSubFolder(statusCodeToEnum.Key.ToString(), $"{subStatusCode}Exception.cs"); #>
<# } #>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>

<# string defaultSubStatusExceptionClassName = $"{statusCodeToEnum.Key}Exception"; #>
namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCode #>
{
    using System;

    internal sealed class <#= defaultSubStatusExceptionClassName #> : <#= baseExceptionClassName #>
    {
        public <#= defaultSubStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext)
            : this(cosmosDiagnosticsContext, message: null)
        {
        }

        public <#= defaultSubStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext, string message)
            : this(cosmosDiagnosticsContext, message, innerException: null)
        {
        }

        public <#= defaultSubStatusExceptionClassName #>(CosmosDiagnosticsContext cosmosDiagnosticsContext, string message, Exception innerException)
            : base(subStatusCode: 0, cosmosDiagnosticsContext: cosmosDiagnosticsContext, message: message, innerException: innerException)
        {
        }
    }
}
<# SaveOutputToSubFolder(statusCodeToEnum.Key.ToString(), defaultSubStatusExceptionClassName + ".cs"); #>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>
<# string unknownSubStatusExceptionClassName = $"Unknown{statusCodeToEnum.Key}Exception"; #>

namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCodeToEnum.Key #>
{
    using System;

    internal sealed class <#= unknownSubStatusExceptionClassName #> : <#= baseExceptionClassName #>
    {
        public <#= unknownSubStatusExceptionClassName #>(int subStatusCode, CosmosDiagnosticsContext cosmosDiagnosticsContext)
            : this(subStatusCode, cosmosDiagnosticsContext, message: null)
        {
        }

        public <#= unknownSubStatusExceptionClassName #>(int subStatusCode, CosmosDiagnosticsContext cosmosDiagnosticsContext, string message)
            : this(subStatusCode, cosmosDiagnosticsContext, message, innerException: null)
        {
        }

        public <#= unknownSubStatusExceptionClassName #>(int subStatusCode, CosmosDiagnosticsContext cosmosDiagnosticsContext, string message, Exception innerException)
            : base(subStatusCode: subStatusCode, cosmosDiagnosticsContext: cosmosDiagnosticsContext, message: message, innerException: innerException)
        {
        }
    }
}
<# SaveOutputToSubFolder(statusCodeToEnum.Key.ToString(), $"{unknownSubStatusExceptionClassName}.cs"); #>
<# } #>
<# // Generate Factories: #>
<#  foreach (KeyValuePair<HttpStatusCode, Type> statusCodeToEnum in statusCodeToEnumType) { #>
<#  HttpStatusCode statusCode = statusCodeToEnum.Key;#>
<#  Type subStatusCodeType = statusCodeToEnum.Value;#>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>

namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCode #>
{
    using System;

    internal static class <#= statusCode #>ExceptionFactory
    {
        public static <#= statusCode #>BaseException Create(
            int? subStatusCode = null,
            CosmosDiagnosticsContext cosmosDiagnosticsContext = null,
            string message = null,
            Exception innerException = null)
        {
            cosmosDiagnosticsContext = cosmosDiagnosticsContext ?? new CosmosDiagnosticsContextCore();
            if (!subStatusCode.HasValue)
            {
                return new <#= statusCode #>Exception(cosmosDiagnosticsContext, message, innerException);
            }

            switch (subStatusCode.Value)
            {
<#  foreach (var subStatusCode in Enum.GetValues(statusCodeToEnum.Value)) { #>
                case (int)<#= statusCode #>SubStatusCode.<#= subStatusCode #>:
                    return new <#= subStatusCode #>Exception(cosmosDiagnosticsContext, message, innerException);

<# } #>
                default:
                    return new Unknown<#= statusCode #>Exception(subStatusCode.Value, cosmosDiagnosticsContext, message, innerException);
            }
        }
    }
}
<# SaveOutputToSubFolder(statusCode.ToString(), $"{statusCode}ExceptionFactory.cs"); #>
<# } #>
<# // Generate SubStatusCode Enums: #>
<#  foreach (KeyValuePair<HttpStatusCode, Type> statusCodeToEnum in statusCodeToEnumType) { #>
// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// <#= ModificationInstructions() #>

namespace Microsoft.Azure.Cosmos.Resource.CosmosExceptions.Http.<#= statusCodeToEnum.Key #>
{
    internal enum <#= statusCodeToEnum.Key #>SubStatusCode
    {
<#  foreach (var subStatusCode in Enum.GetValues(statusCodeToEnum.Value)) { #>
        <#= subStatusCode #> = <#= (int)subStatusCode #>,
<# } #>
    }
}
<# SaveOutputToSubFolder(statusCodeToEnum.Key.ToString(), $"{statusCodeToEnum.Key}SubStatusCode.cs"); #>
<# } #>
<#+
enum BadRequestSubStatusCode
{
    PartitionKeyMismatch = 1001,
    CrossPartitionQueryNotServable = 1004,
    ScriptCompileError = 0xFFFF,    // From ExecuteStoredProcedure.
    AnotherOfferReplaceOperationIsInProgress = 3205,
}
#>
<#+
enum GoneSubStatusCode
{
    NameCacheIsStale = 1000,
    PartitionKeyRangeGone = 1002,
    CompletingSplit = 1007,
    CompletingPartitionMigration = 1008,
}
#>
<#+
enum ForbiddenSubStatusCode
{
    NWriteForbidden = 3,
    ProvisionLimitReached = 1005,
    DatabaseAccountNotFound = 1008,
    RedundantCollectionPut = 1009,
    SharedThroughputDatabaseQuotaExceeded = 1010,
    SharedThroughputOfferGrowNotNeeded = 1011,
    SharedThroughputDatabaseCollectionCountExceeded = 1019,
    SharedThroughputDatabaseCountExceeded = 1020,
}
#>
<#+
enum NotFoundSubStatusCode
{
    ReadSessionNotAvailable = 1002,
    OwnerResourceNotFound = 1003,
    ConfigurationNameNotFound = 1004,
    ConfigurationPropertyNotFound = 1005,
    CollectionCreateInProgress = 1013,
}
#>
<#+
enum RequestTimeoutSubStatusCode
{
}
#>
<#+
enum RequestEntityTooLargeSubStatusCode
{
}
#>
<#+
enum ConflictSubStatusCode
{
    ConflictWithControlPlane = 1006,
    DatabaseNameAlreadyExists = 3206,
    ConfigurationNameAlreadyExists = 3207,
    PartitionkeyHashCollisionForId = 3302,
}
#>
<#+
enum ServiceUnavailableSubStatusCode
{
    InsufficientBindablePartitions = 1007,
    ComputeFederationNotFound = 1012,
    OperationPaused = 9001,
}
#>
<#+
enum InternalServerErrorSubStatusCode
{
    ConfigurationNameNotEmpty = 3001,
}
#>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

private void SaveOutputToSubFolder(string folderName, string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string newDirectoryName = Path.Combine(templateDirectory,folderName);
  if(!Directory.Exists(newDirectoryName))
    Directory.CreateDirectory(newDirectoryName);
  string outputFilePath = Path.Combine(newDirectoryName, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}
private static string ModificationInstructions(
                        [CallerFilePath] string file = "",
                        [CallerLineNumber] int line = 0)
{
    return $"This is auto-generated code. Modify: {Path.GetFileName(file)}: {line}";
}
#>