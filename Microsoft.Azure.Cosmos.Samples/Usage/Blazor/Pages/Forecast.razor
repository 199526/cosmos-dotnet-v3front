@page "/forecast"

@using BlazorCosmosApp.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates creating and fetching data from Cosmos DB.</p>

<button class="btn btn-primary" @onclick="CreateAndReloadWeatherForecast">Create Weather Forecast</button>
<button class="btn btn-primary" @onclick="ReloadAllForecasts">Refresh Weather Forecasts</button>
<br />
<br />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        await this.ReloadAllForecasts();
    }

    private async Task CreateAndReloadWeatherForecast()
    {
        WeatherForecast newForecast = await ForecastService.CreateRandomForecastAsync();
        this.forecasts.Add(newForecast);
    }

    private async Task ReloadAllForecasts()
    {
        this.forecasts = await ForecastService.GetAllForecastsAsync();
    }
}